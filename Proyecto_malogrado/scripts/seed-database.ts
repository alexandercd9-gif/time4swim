import { db } from '../src/lib/prisma';
import bcrypt from 'bcryptjs';

async function seedDatabase() {
  try {
    console.log('üå± Iniciando seed de la base de datos...');

    // 1. Crear clubes de ejemplo
    console.log('üìç Creando clubes...');
    const club1 = await db.createClub({
      name: 'Club Acu√°tico Metropolitano',
      address: 'Av. Principal 123, Ciudad',
      phone: '+1234567890',
      email: 'info@acuaticometro.com',
      website: 'https://acuaticometro.com',
      description: 'Club de nataci√≥n con m√°s de 20 a√±os de experiencia formando campeones.'
    });

    const club2 = await db.createClub({
      name: 'Dolphins Swimming Club',
      address: 'Calle del Mar 456, Costa',
      phone: '+0987654321',
      email: 'contacto@dolphins.com',
      description: 'Club especializado en nataci√≥n competitiva y recreativa.'
    });

    console.log('‚úÖ Clubes creados');

    // 2. Crear usuarios padres de ejemplo
    console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Creando usuarios padres...');
    const parent1 = await db.createUser({
      fullName: 'Mar√≠a Garc√≠a',
      email: 'maria.garcia@email.com',
      password: await bcrypt.hash('password123', 10),
      role: 'PARENT'
    });

    const parent2 = await db.createUser({
      fullName: 'Carlos Rodr√≠guez',
      email: 'carlos.rodriguez@email.com',
      password: await bcrypt.hash('password123', 10),
      role: 'PARENT'
    });

    const parent3 = await db.createUser({
      fullName: 'Ana L√≥pez',
      email: 'ana.lopez@email.com',
      password: await bcrypt.hash('password123', 10),
      role: 'PARENT'
    });

    console.log('‚úÖ Usuarios padres creados');

    // 3. Crear nadadores (hijos) de ejemplo
    console.log('üèä‚Äç‚ôÇÔ∏è Creando nadadores...');
    const swimmer1 = await db.createChild({
      fullName: 'Sofia Garc√≠a Mart√≠nez',
      dateOfBirth: new Date('2012-03-15'),
      gender: 'F',
      clubId: club1.id,
      emergencyContact: 'Mar√≠a Garc√≠a - 555-0123',
      medicalNotes: 'Sin restricciones m√©dicas'
    });

    const swimmer2 = await db.createChild({
      fullName: 'Diego Rodr√≠guez P√©rez',
      dateOfBirth: new Date('2013-07-22'),
      gender: 'M',
      clubId: club1.id,
      emergencyContact: 'Carlos Rodr√≠guez - 555-0456',
      medicalNotes: 'Leve asma, inhalador disponible'
    });

    const swimmer3 = await db.createChild({
      fullName: 'Emma L√≥pez Fern√°ndez',
      dateOfBirth: new Date('2011-11-08'),
      gender: 'F',
      clubId: club2.id,
      emergencyContact: 'Ana L√≥pez - 555-0789',
      medicalNotes: 'Sin restricciones m√©dicas'
    });

    const swimmer4 = await db.createChild({
      fullName: 'Lucas Garc√≠a D√≠az',
      dateOfBirth: new Date('2014-02-14'),
      gender: 'M',
      clubId: club2.id,
      emergencyContact: 'Mar√≠a Garc√≠a - 555-0123',
      medicalNotes: 'Sin restricciones m√©dicas'
    });

    const swimmer5 = await db.createChild({
      fullName: 'Isabella Rodr√≠guez Smith',
      dateOfBirth: new Date('2010-09-30'),
      gender: 'F',
      clubId: club1.id,
      emergencyContact: 'Carlos Rodr√≠guez - 555-0456',
      medicalNotes: 'Sin restricciones m√©dicas'
    });

    console.log('‚úÖ Nadadores creados');

    // 4. Crear relaciones padre-hijo
    console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Creando relaciones familiares...');
    
    // Mar√≠a Garc√≠a es madre de Sofia y Lucas
    await db.createUserChild({
      userId: parent1.id,
      childId: swimmer1.id,
      parentType: 'MADRE',
      isEmergencyContact: true,
      canPickUp: true
    });

    await db.createUserChild({
      userId: parent1.id,
      childId: swimmer4.id,
      parentType: 'MADRE',
      isEmergencyContact: true,
      canPickUp: true
    });

    // Carlos Rodr√≠guez es padre de Diego e Isabella
    await db.createUserChild({
      userId: parent2.id,
      childId: swimmer2.id,
      parentType: 'PADRE',
      isEmergencyContact: true,
      canPickUp: true
    });

    await db.createUserChild({
      userId: parent2.id,
      childId: swimmer5.id,
      parentType: 'PADRE',
      isEmergencyContact: true,
      canPickUp: true
    });

    // Ana L√≥pez es madre de Emma
    await db.createUserChild({
      userId: parent3.id,
      childId: swimmer3.id,
      parentType: 'MADRE',
      isEmergencyContact: true,
      canPickUp: true
    });

    console.log('‚úÖ Relaciones familiares creadas');

    // 5. Crear registros de competencias de ejemplo
    console.log('üèÜ Creando registros de competencias...');
    
    const competitionResults = [
      {
        childId: swimmer1.id,
        style: 'FREESTYLE',
        poolSize: 'SHORT_25M',
        distance: 50,
        time: 32.45,
        date: new Date('2024-01-15'),
        competition: 'Campeonato Regional Juvenil 2024',
        position: 2,
        medal: 'SILVER',
        notes: 'Excelente t√©cnica'
      },
      {
        childId: swimmer1.id,
        style: 'BACKSTROKE',
        poolSize: 'LONG_50M',
        distance: 100,
        time: 78.23,
        date: new Date('2024-02-20'),
        competition: 'Copa Metropolitan Spring',
        position: 1,
        medal: 'GOLD',
        notes: 'Nuevo r√©cord personal'
      },
      {
        childId: swimmer2.id,
        style: 'FREESTYLE',
        poolSize: 'SHORT_25M',
        distance: 25,
        time: 18.67,
        date: new Date('2024-01-15'),
        competition: 'Campeonato Regional Juvenil 2024',
        position: 3,
        medal: 'BRONZE',
        notes: 'Primer competencia oficial'
      },
      {
        childId: swimmer3.id,
        style: 'BUTTERFLY',
        poolSize: 'SHORT_25M',
        distance: 50,
        time: 35.12,
        date: new Date('2024-03-10'),
        competition: 'Torneo Interclubes',
        position: 1,
        medal: 'GOLD',
        notes: 'T√©cnica perfecta'
      },
      {
        childId: swimmer4.id,
        style: 'BREASTSTROKE',
        poolSize: 'SHORT_25M',
        distance: 25,
        time: 22.89,
        date: new Date('2024-02-28'),
        competition: 'Copa Infantil',
        position: 2,
        medal: 'SILVER',
        notes: 'Mejora notable'
      },
      {
        childId: swimmer5.id,
        style: 'INDIVIDUAL_MEDLEY',
        poolSize: 'LONG_50M',
        distance: 100,
        time: 85.34,
        date: new Date('2024-03-15'),
        competition: 'Campeonato Nacional Juvenil',
        position: 1,
        medal: 'GOLD',
        notes: 'R√©cord del club'
      }
    ];

    for (const result of competitionResults) {
      await db.rawClient.record.create({ 
        data: {
          ...result,
          style: result.style as any,
          poolSize: result.poolSize as any,
          medal: result.medal as any
        }
      });
    }

    console.log('‚úÖ Registros de competencias creados');

    // 6. Mostrar resumen de datos creados
    console.log('\nüìä Resumen de datos creados:');
    console.log(`üè¢ Clubes: ${await db.count('club', {})}`);
    console.log(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Usuarios: ${await db.count('user', {})}`);
    console.log(`üèä‚Äç‚ôÇÔ∏è Nadadores: ${await db.count('child', {})}`);
    console.log(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Relaciones familiares: ${await db.count('userChild', {})}`);
    console.log(`üèÜ Registros de competencias: ${await db.count('record', {})}`);

    console.log('\n‚úÖ Seed de la base de datos completado exitosamente!');
    console.log('üìã Credenciales de acceso de ejemplo:');
    console.log('   Email: maria.garcia@email.com');
    console.log('   Email: carlos.rodriguez@email.com');
    console.log('   Email: ana.lopez@email.com');
    console.log('   Password: password123');

  } catch (error) {
    console.error('‚ùå Error durante el seed:', error);
    throw error;
  } finally {
    await db.rawClient.$disconnect();
  }
}

// Ejecutar el seed
seedDatabase()
  .catch((error) => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });