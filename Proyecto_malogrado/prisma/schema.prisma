// Time4Swim - Swimming Times Tracking Application
// Prisma schema for managing swimming records and training sessions

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Swimming styles enum
enum SwimStyle {
  FREESTYLE
  BACKSTROKE
  BREASTSTROKE
  BUTTERFLY
  INDIVIDUAL_MEDLEY
  MEDLEY_RELAY
  OPEN_WATER
}

// Swimming styles configuration table
model SwimStyleConfig {
  id              String   @id @default(cuid())
  style           SwimStyle @unique
  nameEs          String   // Nombre en español
  nameEn          String   // Nombre en inglés
  description     String?  // Descripción opcional
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Gender enum
enum Gender {
  MALE
  FEMALE
}

// User roles enum
enum UserRole {
  ADMIN
  PARENT
  TEACHER
  CLUB
}

// Account status enum
enum AccountStatus {
  TRIAL
  ACTIVE
  EXPIRED
  SUSPENDED
}

// Parentesco enum
enum ParentType {
  PADRE
  MADRE
  TUTOR
  ABUELO
  ABUELA
  OTRO
}

// Pool size enum
enum PoolSize {
  SHORT_25M
  LONG_50M
  OPEN_WATER
}

// Medal types enum
enum MedalType {
  GOLD
  SILVER
  BRONZE
}

// Pool types configuration table
model PoolTypeConfig {
  id              String   @id @default(cuid())
  poolSize        PoolSize @unique
  nameEs          String   // Nombre en español
  nameEn          String   // Nombre en inglés
  description     String?  // Descripción opcional
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Swimming Clubs
model Club {
  id          String   @id @default(cuid())
  name        String   @unique
  address     String?
  phone       String?
  email       String?
  website     String?
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  children    Child[]
  teachers    UserClub[]
}

// User-Club relationship (for teachers)
model UserClub {
  id        String   @id @default(cuid())
  userId    String
  clubId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  @@unique([userId, clubId])
}

// User-Child relationship (for parents)
model UserChild {
  id        String   @id @default(cuid())
  userId    String
  childId   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  @@unique([userId, childId])
}

// Users (Parents/Coaches)
model User {
  id               String        @id @default(cuid())
  name             String
  email            String        @unique
  password         String
  role             UserRole      @default(PARENT)
  parentType       ParentType?   // Solo para usuarios con rol PARENT
  
  // Trial system fields
  accountStatus    AccountStatus @default(TRIAL)
  isTrialAccount   Boolean       @default(true)
  trialExpiresAt   DateTime?     // Fecha de expiración del trial
  trialExtendedBy  String?       // ID del admin que extendió el trial
  trialExtendedAt  DateTime?     // Fecha cuando se extendió
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Relations
  clubs            UserClub[]
  children         UserChild[]
}

// Children/Swimmers
model Child {
  id        String   @id @default(cuid())
  name      String
  birthDate DateTime
  gender    Gender
  coach     String?
  photo     String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // FDPN Integration fields
  firstName         String?  // Primer nombre para búsqueda en FDPN
  lastName          String?  // Apellidos para búsqueda en FDPN
  fdpnAffiliateCode String?  // Código de afiliado FDPN (ej: "79272554")
  fdpnData          String?  @db.LongText // JSON con datos de FDPN
  fdpnLastSync      DateTime? // Última sincronización con FDPN
  
  // Relations
  clubId    String?
  club      Club?     @relation(fields: [clubId], references: [id], onDelete: SetNull)
  parents   UserChild[]
  records   Record[]
  trainings Training[]

  @@index([fdpnAffiliateCode])
}

// Competition Records
model Record {
  id             String    @id @default(cuid())
  style          SwimStyle
  poolSize       PoolSize
  competition    String
  date           DateTime
  distance       Int       // distance in meters
  time           Float     // time in seconds
  position       Int?      // finishing position
  medal          MedalType? // medal obtained (if any)
  notes          String?
  isPersonalBest Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  childId        String
  child          Child     @relation(fields: [childId], references: [id], onDelete: Cascade)
}

// Training Sessions
model Training {
  id        String    @id @default(cuid())
  style     SwimStyle
  distance  Int       // distance in meters
  time      Float     // time in seconds
  date      DateTime  @default(now())
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  childId   String
  child     Child     @relation(fields: [childId], references: [id], onDelete: Cascade)
}
